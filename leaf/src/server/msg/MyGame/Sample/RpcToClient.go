// automatically generated by the FlatBuffers compiler, do not modify

package Sample

import (
	flatbuffers "github.com/google/flatbuffers/go"
)

type RpcToClient struct {
	_tab flatbuffers.Table
}

func GetRootAsRpcToClient(buf []byte, offset flatbuffers.UOffsetT) *RpcToClient {
	n := flatbuffers.GetUOffsetT(buf[offset:])
	x := &RpcToClient{}
	x.Init(buf, n+offset)
	return x
}

func (rcv *RpcToClient) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *RpcToClient) Table() flatbuffers.Table {
	return rcv._tab
}

func (rcv *RpcToClient) SyncId() int32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		return rcv._tab.GetInt32(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *RpcToClient) MutateSyncId(n int32) bool {
	return rcv._tab.MutateInt32Slot(4, n)
}

func (rcv *RpcToClient) FuncName() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

func (rcv *RpcToClient) ParamData(j int) byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(8))
	if o != 0 {
		a := rcv._tab.Vector(o)
		return rcv._tab.GetByte(a + flatbuffers.UOffsetT(j*1))
	}
	return 0
}

func (rcv *RpcToClient) ParamDataLength() int {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(8))
	if o != 0 {
		return rcv._tab.VectorLen(o)
	}
	return 0
}

func (rcv *RpcToClient) ParamDataBytes() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(8))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

func (rcv *RpcToClient) ParamTypes(j int) int8 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(10))
	if o != 0 {
		a := rcv._tab.Vector(o)
		return rcv._tab.GetInt8(a + flatbuffers.UOffsetT(j*1))
	}
	return 0
}

func (rcv *RpcToClient) ParamTypesLength() int {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(10))
	if o != 0 {
		return rcv._tab.VectorLen(o)
	}
	return 0
}

func (rcv *RpcToClient) ParamSize(j int) uint16 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(12))
	if o != 0 {
		a := rcv._tab.Vector(o)
		return rcv._tab.GetUint16(a + flatbuffers.UOffsetT(j*2))
	}
	return 0
}

func (rcv *RpcToClient) ParamSizeLength() int {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(12))
	if o != 0 {
		return rcv._tab.VectorLen(o)
	}
	return 0
}

func RpcToClientStart(builder *flatbuffers.Builder) {
	builder.StartObject(5)
}
func RpcToClientAddSyncId(builder *flatbuffers.Builder, syncId int32) {
	builder.PrependInt32Slot(0, syncId, 0)
}
func RpcToClientAddFuncName(builder *flatbuffers.Builder, funcName flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(1, flatbuffers.UOffsetT(funcName), 0)
}
func RpcToClientAddParamData(builder *flatbuffers.Builder, paramData flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(2, flatbuffers.UOffsetT(paramData), 0)
}
func RpcToClientStartParamDataVector(builder *flatbuffers.Builder, numElems int) flatbuffers.UOffsetT {
	return builder.StartVector(1, numElems, 1)
}
func RpcToClientAddParamTypes(builder *flatbuffers.Builder, paramTypes flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(3, flatbuffers.UOffsetT(paramTypes), 0)
}
func RpcToClientStartParamTypesVector(builder *flatbuffers.Builder, numElems int) flatbuffers.UOffsetT {
	return builder.StartVector(1, numElems, 1)
}
func RpcToClientAddParamSize(builder *flatbuffers.Builder, paramSize flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(4, flatbuffers.UOffsetT(paramSize), 0)
}
func RpcToClientStartParamSizeVector(builder *flatbuffers.Builder, numElems int) flatbuffers.UOffsetT {
	return builder.StartVector(2, numElems, 2)
}
func RpcToClientEnd(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	return builder.EndObject()
}
