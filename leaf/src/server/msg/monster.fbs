// Example IDL file for our monster's schema.
namespace MyGame.Sample;
enum Color:byte { Red = 0, Green, Blue = 2 }
union Equipment { Weapon } // Optionally add more tables.
struct Vec3 {
  x:float;
  y:float;
  z:float;
}
table Monster {
  pos:Vec3; // Struct.
  mana:short = 150;
  hp:short = 100;
  name:string;
  friendly:bool = false (deprecated);
  inventory:[ubyte];  // Vector of scalars. 标量组成的矢量(用数组表示矢量)
  color:Color = Blue; // Enum.
  weapons:[Weapon];   // Vector of tables.  table组成的矢量
  equipped:Equipment; // Union.
  path:[Vec3];        // Vector of structs. structs组成的矢量
}
table Weapon {
  name:string;
  damage:short;
}
root_type Monster;

/*
https://google.github.io/flatbuffers/flatbuffers_guide_tutorial.html

As you can see, the syntax for the schema Interface Definition Language (IDL) is similar to those of the C family of languages,
and other IDL languages.

Compiling the Monsters' Schema
1. 首先需要有compiler: If you have not already done so, please follow these instructions to build flatc, the FlatBuffer compiler.
    https://google.github.io/flatbuffers/flatbuffers_guide_building.html

2. Windows 使用git-bash在目录下执行 ./flate.exe --go monster.fbs 自动按照命名空间生成目录MyGame/Sample/*.go
*/